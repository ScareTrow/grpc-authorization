# Options for analysis running.
run:
  # Timeout for analysis, e.g. 30s, 5m.
  timeout: 1m

  # Exit code when at least one issue was found.
  issues-exit-code: 1

  # Include test files or not.
  tests: true

  # Enables skipping of directories:
  # - vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs-use-default: true

  # Allow multiple parallel golangci-lint instances running.
  # If false - golangci-lint acquires file lock on start.
  allow-parallel-runners: false

  # Define the Go version limit.
  # Mainly related to generics support since go1.18.
  go: '1.21'


# output configuration options
output:
  # Format: colored-line-number|line-number|json|colored-tab|tab|checkstyle|code-climate|junit-xml|github-actions|teamcity
  #
  # Multiple can be specified by separating them by comma, output can be provided
  # for each of them by separating format name and path by colon symbol.
  # Output path can be either `stdout`, `stderr` or path to the file to write to.
  # Example: "checkstyle:report.xml,json:stdout,colored-line-number"
  format: colored-tab

  # Print lines of code with issue.
  print-issued-lines: true

  # Print linter name in the end of issue text.
  print-linter-name: true

  # Make issues output unique by line.
  uniq-by-line: true

# https://golangci-lint.run/usage/linters/
linters:
  enable-all: true

  # Run only fast linters from enabled linters set (first run won't be fast)
  fast: false

  disable:
  - depguard    # Go linter that checks if package imports are in a list of acceptable packages.
  - dupl    # Go linter that checks for duplicated code.
  - exhaustruct    # Go linter that checks if all struct fields are initialized.
  - goerr113    # Go linter to check the errors handling expressions.
  - nolintlint    # Go linter that checks if a file contains `//nolint` comments.
  - varnamelen    # Checks that the length of a variable's name matches its scope
  - wsl    # Whitespace Linter - Forces you to use empty lines!

    # deprecated linters
  - structcheck
  - maligned
  - exhaustivestruct
  - varcheck
  - deadcode
  - nosnakecase
  - interfacer
  - ifshort
  - scopelint
  - golint

linters-settings:
  importas:
    # Do not allow unaliased imports of aliased packages.
    no-unaliased: false  # set to true when https://github.com/julz/importas/pull/20 is merged

    # Do not allow non-required aliases.
    no-extra-aliases: true

    # List of aliases
    alias:
      # common package from geth conflicts with internal/common package from our codebase
    - pkg: github.com/ethereum/go-ethereum/common
      alias: geth

    - pkg: github.com/miguelmota/go-ethereum-hdwallet
      alias: hdwallet

  gci:
    # Section configuration to compare against.
    # Section names are case-insensitive and may contain parameters in ().
    # The default order of sections is `standard > default > custom > blank > dot`,
    # If `custom-order` is `true`, it follows the order of `sections` option.
    sections:
    - standard   # Standard section: captures all standard packages.
    - default   # Default section: contains all imports that could not be matched to another section type.
    - prefix(github.com/ScareTrow)   # Custom section: groups all imports with the specified Prefix.
    - blank   # Blank section: contains all blank imports. This section is not present unless explicitly enabled.
    - dot   # Dot section: contains all dot imports. This section is not present unless explicitly enabled.

    # Skip generated files.
    skip-generated: true
    # Enable custom order of sections.
    # If `true`, make the section order the same as the order of `sections`.
    custom-order: true

  testpackage:
    # Regexp pattern to skip files.
    skip-regexp: tests?\/.*\.go

  wrapcheck:
    ignoreSigs:
    - status.Error(
    - status.Errorf(

    - .Errorf(

issues:
  exclude-rules:
    # Exclude some linters from running on tests files.
  - path: _test\.go
    linters:
    - funlen
    - wrapcheck
